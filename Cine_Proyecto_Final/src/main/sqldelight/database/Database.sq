-- Tabla para almacenar información de las butacas
CREATE TABLE IF NOT EXISTS ButacaEntity (
   id TEXT NOT NULL,
   tipo TEXT NOT NULL, -- Normal o VIP
   estado TEXT NOT NULL, -- Libre, ocupada o fuera de servicio
   id_venta TEXT,
   precio INTEGER NOT NULL,
   createdAt TEXT NOT NULL,
   updatedAt TEXT NOT NULL,
   PRIMARY KEY(id, updatedAt),
   FOREIGN KEY (id_venta) REFERENCES VentaEntity(id)
);

-- Tabla para almacenar información de los productos
CREATE TABLE IF NOT EXISTS ProductoEntity (
    id TEXT NOT NULL,
    nombre TEXT NOT NULL,
    precio REAL NOT NULL,
    stock INTEGER NOT NULL,
    tipo TEXT NOT NULL,
    imagen TEXT NOT NULL,
    isDeleted INTEGER NOT NULL,
    createdAt TEXT NOT NULL,
    updatedAt TEXT NOT NULL,
    PRIMARY KEY(id, updatedAt)
);

-- Tabla para almacenar información de las ventas
CREATE TABLE IF NOT EXISTS VentaEntity (
    id TEXT NOT NULL,
    id_socio TEXT NOT NULL,
    isDeleted INTEGER NOT NULL,
    createdAt TEXT NOT NULL,
    updatedAt TEXT NOT NULL,
    PRIMARY KEY(id, updatedAt),
    FOREIGN KEY (id_socio) REFERENCES CuentaEntity(email)
);

-- Tabla para almacenar los productos asociados a una venta
CREATE TABLE IF NOT EXISTS LineaVentaEntity (
   id TEXT NOT NULL,
   id_venta TEXT NOT NULL,
   id_producto TEXT NOT NULL,
   cantidad INTEGER NOT NULL,
   precio REAL NOT NULL,
   isDeleted INTEGER NOT NULL,
   createdAt TEXT NOT NULL,
   updatedAt TEXT NOT NULL,
   PRIMARY KEY(id, updatedAt),
   FOREIGN KEY (id_producto) REFERENCES ProductoEntity(id),
   FOREIGN KEY (id_venta) REFERENCES VentaEntity(id)
);

-- Tabla para almacenar las cuentas
CREATE TABLE IF NOT EXISTS CuentaEntity (
    email TEXT NOT NULL,
    nombre TEXT NOT NULL,
    apellido TEXT NOT NULL,
    imagen TEXT NOT NULL,
    password TEXT NOT NULL,
    tipo TEXT NOT NULL,
    createdAt TEXT NOT NULL,
    updatedAt TEXT NOT NULL,
    PRIMARY KEY(email, updatedAt)
);

-- Insertar cuenta de administrador
INSERT INTO CuentaEntity (email, nombre, apellido, imagen, password, tipo, createdAt, updatedAt)
VALUES ('administrador@dev.com', 'Administrador', '1', 'sin_imagen.jpg', '1234', 'ADMINISTRADOR', '2024-05-15', '2024-05-15');

-- Consultas
-- Obtener producto por ID y fecha
findProductByIdAndDate:
SELECT *
FROM ProductoEntity WHERE id = ?;

-- Obtener butaca por ID
getButacaById:
SELECT * FROM ButacaEntity
WHERE id = ?;

-- Obtener todas las butacas
getAllButacas:
SELECT *
FROM ButacaEntity;

-- Contar butacas
countButacas:
SELECT COUNT(*)
FROM ButacaEntity;

-- Verificar si existe una butaca por ID
butacaExists:
SELECT COUNT(*) > 0
FROM ButacaEntity
WHERE id = ?;

-- Actualizar butaca
updateButaca:
UPDATE ButacaEntity
SET estado = ?, updatedAt = ?, tipo = ?, id_venta = ?
WHERE id = ?;

countButacasByVentaId:
SELECT COUNT(*) FROM ButacaEntity
WHERE id_venta = ?;

getButacasByVentaId:
SELECT * FROM ButacaEntity
WHERE id_venta = ?;

-- Insertar nuevo
insertButaca:
INSERT INTO ButacaEntity (id, estado,precio, tipo, id_venta, createdAt, updatedAt)
VALUES (?, ?, ?, ?, ?, ?,?);

-- Insertar nuevo producto
insertProducto:
INSERT INTO ProductoEntity (id, nombre, precio, stock, tipo, imagen, createdAt, updatedAt, isDeleted)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?);

-- Eliminar todas las butacas
removeAllButacas:
DELETE FROM ButacaEntity;

-- Eliminar todas las cuentas
removeAllCuentas:
DELETE FROM CuentaEntity;

-- Eliminar todos los productos
removeAllProductos:
DELETE FROM ProductoEntity;

-- Contar productos
countProductos:
SELECT COUNT(*)
FROM ProductoEntity;

-- Obtener todos los productos
getAllProductos:
SELECT *
FROM ProductoEntity;

-- Verificar si existe un producto por ID
productoExists:
SELECT COUNT(*) > 0
FROM ProductoEntity
WHERE id = ?;

-- Obtener producto por ID
getProductoById:
SELECT *
FROM ProductoEntity
WHERE id = ?;

-- Eliminar todas las ventas y líneas de venta
removeAllVentas:
DELETE FROM VentaEntity;
DELETE FROM LineaVentaEntity;

-- Obtener todas las ventas
getAllVentas:
SELECT *
FROM VentaEntity;

-- Obtener línea de venta por ID de venta
getLineaVentaByVentaId:
SELECT *
FROM LineaVentaEntity
WHERE id_venta = ?;

-- Contar líneas de venta por ID de venta
countLineasVentaByVentaId:
SELECT COUNT(*)
FROM LineaVentaEntity
WHERE id_venta = ?;

-- Obtener venta por ID
getVentaById:
SELECT *
FROM VentaEntity
WHERE id = ?;

-- Eliminar (marcar como eliminada) una línea de venta
deleteLineaVenta:
UPDATE LineaVentaEntity
SET isDeleted = 1, updatedAt = ?
WHERE id = ?;

-- Insertar nueva venta
insertVenta:
INSERT INTO VentaEntity (id, id_socio, createdAt, updatedAt, isDeleted)
VALUES (?, ?, ?, ?, ?);

-- Insertar nueva línea de venta
insertLineaVenta:
INSERT INTO LineaVentaEntity (id, id_venta, id_producto, precio, cantidad, createdAt, updatedAt, isDeleted)
VALUES (?, ?, ?, ?, ?, ?, ?, ?);

-- Verificar si existe una venta por ID
existsVenta:
SELECT COUNT(*) > 0
FROM VentaEntity
WHERE id = ?;

-- Contar ventas
countVentas:
SELECT COUNT(*)
FROM VentaEntity;

deleteVenta:
UPDATE VentaEntity SET updatedAt = ?, isDeleted = 1 WHERE id = ?;

deleteProducto:
UPDATE ProductoEntity SET updatedAt = ?, isDeleted = 1 WHERE id = ?;

updateProducto:
UPDATE ProductoEntity SET updatedAt = ?, tipo = ?, nombre = ?, imagen = ?, precio = ?, stock = ? WHERE id = ?;
